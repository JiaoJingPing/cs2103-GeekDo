/**
 * @author Jiao Jing Ping
 * @version 0.2
 * This is a unit test class for Controller object.
 * Test cases are generated by DummyEventGenerator
 * 
 * Tests include API:
 * 	dddTask();
 *	editTaskDescription();
 *	editTaskEndDate();
 *	editTaskPriority();
 *	editTaskStartDate();
 *	markTaskAsIncomplete();
 *  markTaskAsComplete();
 *	searchTask();
 */
package test.logic;

import java.util.ArrayList;
import java.util.Calendar;

import objects.Event;
import objects.Result;
import test.DummyEventGenerator;
import junit.framework.TestCase;
import logic.Controller;

/**
 */
public class ControllerTester extends TestCase {
	private Event testEvent;
	private int testId;
	private String testDes;
	private String testTag;
	private int testPriority;
	private Calendar testEndDate;
	private Calendar testStartDate;

	/**
	 * @param name
	 */
	public ControllerTester(String name) {
		super(name);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see junit.framework.TestCase#setUp()
	 */
	protected void setUp() {
		try {
			super.setUp();
			Controller.initializeEventList();
			testEvent = DummyEventGenerator.getDummyEvent();
			testId = testEvent.getId();
			testDes = testEvent.getDetails();
			testTag = testEvent.getTag();
			testPriority = testEvent.getPriority();
			testEndDate = testEvent.getEndDate();
			testStartDate = testEvent.getStartDate();
			reload();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		ControllerTester test = new ControllerTester("test");
		test.testAddTask();
		test.testEditTaskDescription();
		test.testEditTaskEndDate();
		test.testEditTaskPriority();
		test.testEditTaskStartDate();
		test.testMark();
		test.testSearch();
	}

	private static void reload() {
		Controller.deleteAllOpenTask();
		Controller.deleteAllCompleteTask();
	}

	public void testAddTask() {
		// TODO Auto-generated method stub
		System.out.println("This is test for addTask");
		Result r = Controller.addTask(testId, testDes, testTag, testEndDate,testStartDate, testPriority);
		Event eventAdded = r.getData().get(0);

		assertEquals(eventAdded.getDetails(), testDes);
		assertEquals(eventAdded.getTag(), testTag);
		assertEquals(eventAdded.getEndDate(), testEndDate);
		assertEquals(eventAdded.getStartDate(), testStartDate);
		assertEquals(eventAdded.getPriority(), testPriority);
	}

	public void testMark() {
		// TODO Auto-generated method stub
		reload();
		Controller.addTask(testId, testDes, testTag, testEndDate,testStartDate, testPriority);
		int oriComSize = Controller.getAllCompletedTask().getData().size();
		Controller.markTaskAsComplete(testId);
		int newComSize = Controller.getAllCompletedTask().getData().size();
		assertEquals(oriComSize, newComSize - 1);

		int oriIncomSize = Controller.getAllOpenTasks().getData().size();
		Controller.markTaskAsInComplete(testId);
		int newIncomSize = Controller.getAllOpenTasks().getData().size();
		assertEquals(oriIncomSize, newIncomSize - 1);
	}

	public void testSearch() {
		// TODO Auto-generated method stub
		reload();
		Controller.addTask(testId, testDes, testTag, testEndDate,
				testStartDate, testPriority);
		ArrayList<String> searchKeyWord = new ArrayList<String>();
		String keyWord = testDes;

		searchKeyWord.add(keyWord);
		Result r1 = Controller.searchForAllTask(searchKeyWord);
		assertTrue(r1.isSuccessful());
		assertEquals(testId, r1.getData().get(0).getId());

		keyWord = testTag;
		searchKeyWord.clear();
		searchKeyWord.add(keyWord);
		Result r2 = Controller.searchForOpenTask(searchKeyWord, "tag");
		assertTrue(r2.isSuccessful());
		assertEquals(testTag, r2.getData().get(0).getTag());

	}

	public void testEditTaskStartDate() {
		// TODO Auto-generated method stub
		Controller.addTask(testId, testDes, testTag, testEndDate,
				testStartDate, testPriority);
		System.out.println("This is testEditTaskStartDate");
		Result r = Controller.editTaskStartDate(testId, 1, 1, 1990);
		Event eventAfterEdit = r.getData().get(1);
		assertEquals(1, eventAfterEdit.getStartDate().get(Calendar.MONTH));
		assertEquals(1990, eventAfterEdit.getStartDate().get(Calendar.YEAR));
		assertEquals(1, eventAfterEdit.getStartDate().get(Calendar.DATE));
	}

	public void testEditTaskPriority() {
		// TODO Auto-generated method stub
		Controller.addTask(testId, testDes, testTag, testEndDate,
				testStartDate, testPriority);
		System.out.println("This is testEditTaskPriority");
		Result r = Controller.editTaskPriority(testId, 1);
		Event eventAfterEdit = r.getData().get(1);
		assertEquals(eventAfterEdit.getPriority(), 1);
	}

	public void testEditTaskEndDate() {
		// TODO Auto-generated method stub
		Controller.addTask(testId, testDes, testTag, testEndDate,
				testStartDate, testPriority);
		Result r = Controller.editTaskEndDate(testId, 1, 1, 1990);
		Event eventAfterEdit = r.getData().get(1);
		assertTrue(r.isSuccessful());
		assertEquals(1, eventAfterEdit.getEndDate().get(Calendar.MONTH));
		assertEquals(1990, eventAfterEdit.getEndDate().get(Calendar.YEAR));
		assertEquals(1, eventAfterEdit.getEndDate().get(Calendar.DATE));
	}

	public void testEditTaskDescription() {
		// TODO Auto-generated method stub
		Controller.addTask(testId, testDes, testTag, testEndDate,
				testStartDate, testPriority);
		Result r = Controller.editTaskDescription(testId, "test");
		assertTrue(r.isSuccessful());
		System.out.println(r.getError());
		Event eventAfterEdit = r.getData().get(0);
		assertTrue(r.isSuccessful());
		assertEquals(eventAfterEdit.getDetails(), "test");
	}

}